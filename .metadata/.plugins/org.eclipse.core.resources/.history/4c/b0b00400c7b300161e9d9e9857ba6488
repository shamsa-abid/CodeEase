import java.awt.List;
import java.util.ArrayList;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.ui.text.java.IInvocationContext;
import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;
import org.eclipse.jdt.ui.text.java.IProblemLocation;
import org.eclipse.jdt.ui.text.java.IQuickAssistProcessor;
import org.eclipse.jdt.ui.text.java.correction.ChangeCorrectionProposal;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor;
import org.eclipse.jdt.internal.ui.text.correction.AssistContext;
import org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal;
import org.eclipse.jdt.ui.actions.AddGetterSetterAction;
import org.eclipse.jdt.ui.text.java.IInvocationContext;
import org.eclipse.jdt.ui.text.java.IJavaCompletionProposal;
import org.eclipse.jdt.ui.text.java.IProblemLocation;
import org.eclipse.jdt.ui.text.java.IQuickAssistProcessor;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.graphics.Image;

import lums.cbrs.completion.CodeCompletion;
import sampleview.Activator;
import sampleview.popup.Mypopup;
import sampleview.views.SampleView;
import testpopupmenu.popup.actions.SimpleMessageAction.ViewContentProvider;
import testpopupmenu.popup.actions.SimpleMessageAction.ViewLabelProvider;

public class QuickAssistProcessor1 implements IQuickAssistProcessor {

	@Override
	public boolean hasAssists(IInvocationContext context) throws CoreException {
		ASTNode coveredNode = context.getCoveredNode();

		return coveredNode.getNodeType() == ASTNode.TYPE_DECLARATION;
	}

	@Override
	public IJavaCompletionProposal[] getAssists(IInvocationContext context, IProblemLocation[] locations)
			throws CoreException {
		ArrayList<IJavaCompletionProposal> proposals = new ArrayList<IJavaCompletionProposal>();
		proposals.add(new AbstractJavaCompletionProposal() {
             public org.eclipse.jface.viewers.StyledString getStyledDisplayString() {
                     ICompilationUnit compilationUnit = context.getCompilationUnit();
                     return new StyledString(
                                     "Complete Method");
                     //+ compilationUnit.findPrimaryType().getElementName());
             }

             protected int getPatternMatchRule(String pattern, String string) {
                     // override the match rule since we do not work with a pattern, but just want to open the "Generate Getters and Setters..." dialog
                     return -1;
             };

             public void apply(org.eclipse.jface.text.ITextViewer viewer, char trigger, int stateMask, int offset) {
/*
                     if(context instanceof AssistContext) {
                             AssistContext assistContext = (AssistContext) context;
                             AddGetterSetterAction addGetterSetterAction = new AddGetterSetterAction((CompilationUnitEditor)assistContext.getEditor());

                             addGetterSetterAction.run();
                     }
*/
            	 SampleView.section.setText("Method Completion Recommendations");
					SampleView.section.setDescription("3 results found");
					SampleView.viewer.setContentProvider(new ViewContentProvider(""));
					SampleView.viewer.setLabelProvider(new ViewLabelProvider());        
					SampleView.viewer.setInput(SampleView.obj);
             }
								
							public Image getImage()
							{
								ImageDescriptor descriptor = Activator.getImageDescriptor("platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif");
							    return descriptor.createImage();
								
							}

							public int getRelevance()
							{
								return 2;
							}
						
		});
		
		proposals.add(new ChangeCorrectionProposal("Find Friends", null, 1) {
            public org.eclipse.jface.viewers.StyledString getStyledDisplayString() {
                   
                    return new StyledString(
                                    "Find Friends");
                    //+ compilationUnit.findPrimaryType().getElementName());
            }

           				
							public Image getImage()
							{
								ImageDescriptor descriptor = Activator.getImageDescriptor("platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif");
							    return descriptor.createImage();
								
							}

						
		});
	
		
		return proposals.toArray(new IJavaCompletionProposal[proposals.size()]);
	}
	class ViewLabelProvider extends LabelProvider implements ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			return getText(obj);
		}
		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}
		public Image getImage(Object obj) {
			//platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif
			//return PlatformUI.getWorkbench().
			//		getSharedImages().getImage(ISharedImages.IMG_OBJ_FOLDER);		
			
			ImageDescriptor descriptor = Activator.getImageDescriptor("platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif");
	    return descriptor.createImage();
		}
	}
	class ViewContentProvider implements IStructuredContentProvider {
		private String methodName;
		public ViewContentProvider(String data)
		{
			methodName = data;
		}
		
		public void inputChanged(Viewer v, Object oldInput, Object newInput) {
		}
		public void dispose() {
		}
		public Object[] getElements(Object parent) {
			CodeCompletion cc = new CodeCompletion();
			if(methodName.equalsIgnoreCase("friends"))
			{
				return cc.getWriteFileMethodNames().toArray();
			}
			else
			{
			
			return cc.getReadFileMethodNames().toArray();
			}
		}
	}
	
}


	/*
return new IJavaCompletionProposal[] { new AbstractJavaCompletionProposal() {
             public org.eclipse.jface.viewers.StyledString getStyledDisplayString() {
                     ICompilationUnit compilationUnit = context.getCompilationUnit();
                     return new StyledString(
                                     "Complete Method");
                     //+ compilationUnit.findPrimaryType().getElementName());
             }

             protected int getPatternMatchRule(String pattern, String string) {
                     // override the match rule since we do not work with a pattern, but just want to open the "Generate Getters and Setters..." dialog
                     return -1;
             };

             public void apply(org.eclipse.jface.text.ITextViewer viewer, char trigger, int stateMask, int offset) {

                     if(context instanceof AssistContext) {
                             AssistContext assistContext = (AssistContext) context;
                             AddGetterSetterAction addGetterSetterAction = new AddGetterSetterAction((CompilationUnitEditor)assistContext.getEditor());

                             addGetterSetterAction.run();
                     }

             }
								
							public Image getImage()
							{
								ImageDescriptor descriptor = Activator.getImageDescriptor("platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif");
							    return descriptor.createImage();
								
							}

						
		}};
*/