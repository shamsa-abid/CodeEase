package sampleview.views;


import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.part.*;

import insertcode.CodeInsertion;
import lums.cbrs.completion.CodeCompletion;
import sampleview.Activator;

import org.eclipse.jface.viewers.*;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;

import java.net.URI;
import java.util.ArrayList;

import org.eclipse.jface.action.*;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.*;
import org.eclipse.ui.editors.text.TextEditor;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.forms.widgets.ScrolledForm;
import org.eclipse.ui.forms.widgets.Section;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.jface.text.Document;
import org.eclipse.jface.text.TextViewer;
import org.eclipse.jface.layout.TableColumnLayout;


/**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */

public class SampleView extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "sampleview.views.SampleView";

	private static SampleView view;
	public static TableViewer viewer;
	private Action action1;
	private Action action2;
	private Action doubleClickAction;
	private static ArrayList<String> methodNames = new ArrayList<String>();
	private static ArrayList<StyledText> methodBodyTextAreasList = new ArrayList<StyledText>();
	private TabFolder tabFolder;
	public static Section section;
	FormToolkit toolkit;
	TabItem dummyTab;
	public static Object obj;
	TableViewer viewer2;
	Label lblFriendMethods;
	/*
	 * The content provider class is responsible for
	 * providing objects to the view. It can wrap
	 * existing objects in adapters or simply return
	 * objects as-is. These objects may be sensitive
	 * to the current input of the view, or ignore
	 * it and always show the same content 
	 * (like Task List, for example).
	 */
	 
	public ArrayList<String> getMethodNames() {
		return methodNames;
	}

	public void setMethodNames(ArrayList<String> methodNames) {
		this.methodNames = methodNames;
	}

	public class ViewContentProvider implements IStructuredContentProvider {
		private String methodName;
		public ViewContentProvider(String data)
		{
			methodName = data;
			
		}
		
		public void inputChanged(Viewer v, Object oldInput, Object newInput) {
		}
		public void dispose() {
		}
		public Object[] getElements(Object parent) {
			//return new String[] { "One", "Two", "Three" };
			//return methodName;
			CodeCompletion cc = new CodeCompletion();
			if(methodName.equalsIgnoreCase("friends"))
			{
				return cc.getFriendMethodNames().toArray();
			}
			else
			{
			
			return cc.getMethodNames().toArray();
			}
			//return methodNames.toArray();
		}
	}
	
	class ViewLabelProvider extends LabelProvider implements ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			return getText(obj);
		}
		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}
		public Image getImage(Object obj) {
			//platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif
			//return PlatformUI.getWorkbench().
			//		getSharedImages().getImage(ISharedImages.IMG_OBJ_FOLDER);		
			
			ImageDescriptor descriptor = Activator.getImageDescriptor("platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif");
	    return descriptor.createImage();
		}
	}
	class NameSorter extends ViewerSorter {
	}

	/**
	 * The constructor.
	 */
	public SampleView() {
		view = this;
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	/*public void createPartControl(Composite parent) {
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		viewer.setContentProvider(new ViewContentProvider());
		viewer.setLabelProvider(new ViewLabelProvider());
		viewer.setSorter(new NameSorter());
		viewer.setInput(getViewSite());

		// Create the help context id for the viewer's control
		PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "sampleview.viewer");
		makeActions();
		hookContextMenu();
		hookDoubleClickAction();
		contributeToActionBars();
	}
*/
	public void createPartControl(Composite parent) {
		/*FormToolkit toolkit = new FormToolkit(parent.getDisplay());         
         // Lets make a layout for the first section of the screen

         // Creating the Screen
         Section section = toolkit.createSection(parent, Section.COMPACT | Section.DESCRIPTION | Section.TITLE_BAR);
         section.setText("Method Completion Recommendations");
         section.setDescription("3 results found");
         // Composite for storing the data
         Composite client = toolkit.createComposite(section, SWT.H_SCROLL | SWT.V_SCROLL);
         GridLayout layout = new GridLayout();
         layout = new GridLayout();
         layout.numColumns = 2;
         layout.marginWidth = 2;
         layout.marginHeight = 2;
         client.setLayout(layout);

         Table t = toolkit.createTable(client, SWT.NONE);
         GridData gd = new GridData(GridData.FILL_BOTH);
         gd.minimumWidth = 60;
         gd.grabExcessVerticalSpace = false;
         gd.grabExcessHorizontalSpace = false;
         gd.heightHint = 20;
         t.setLayoutData(gd);

         toolkit.paintBordersFor(client);

         section.setClient(client);
         //new section
         //Section section2 = toolkit.createSection(parent, Section.DESCRIPTION
          //       | Section.TITLE_BAR);
         //section2.setText("Method Bodies"); //$NON-NLS-1$
         //section2.setDescription("3 results found");
         //section2.setClient(client);

         viewer = new TableViewer(t);

         TabFolder tabFolder = new TabFolder(client, SWT.NONE);
         toolkit.adapt(tabFolder);
         toolkit.paintBordersFor(tabFolder);

         TabItem tbtmNewItem = new TabItem(tabFolder, SWT.NONE);
         tbtmNewItem.setText("New Item");
		 */
		try{
			toolkit = new FormToolkit(parent.getDisplay());      
			section = toolkit.createSection(parent, Section.COMPACT | Section.DESCRIPTION | Section.TITLE_BAR);
			//section.setText("Method Completion Recommendations");
			//section.setDescription("3 results found");

			Composite composite = new Composite(section, SWT.NONE);
			GridLayout gl_composite = new GridLayout(2, false);
			composite.setLayout(gl_composite);		 
			section.setClient(composite);
			
			viewer = new TableViewer(composite, SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
			Table table = viewer.getTable();
			GridData gd_table = new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1);
			gd_table.widthHint = 200;
			gd_table.heightHint = 100;
			table.setLayoutData(gd_table);
			//viewer.setContentProvider(new ViewContentProvider(""));
			//viewer.setLabelProvider(new ViewLabelProvider());        
			//viewer.setInput(getViewSite());
			
						
			PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "sampleview.viewer");
			makeActions();
			hookContextMenu();
			hookDoubleClickAction();
			contributeToActionBars();

			tabFolder = new TabFolder(composite, SWT.NONE);

			GridData gd_tabFolder = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 3);
			gd_tabFolder.heightHint = 100;
			gd_tabFolder.minimumWidth = 100;
			gd_tabFolder.widthHint = 100;
			tabFolder.setLayoutData(gd_tabFolder);

			TabItem tabItem_1 = new TabItem(tabFolder, SWT.NONE);
			tabItem_1.setText("New Item");

			Composite composite_1 = new Composite(tabFolder, SWT.NONE);
			tabItem_1.setControl(composite_1);

			toolkit.paintBordersFor(composite_1);
			composite_1.setLayout(new GridLayout(1, false));

			TextViewer textViewer = new TextViewer(composite_1, SWT.BORDER | SWT.READ_ONLY | SWT.V_SCROLL | SWT.H_SCROLL);
			StyledText styledText = textViewer.getTextWidget();
			styledText.setEditable(false);
			GridData gd_styledText = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
			gd_styledText.heightHint = 294;		 
			styledText.setLayoutData(gd_styledText);
			methodBodyTextAreasList.add(styledText);			
			toolkit.paintBordersFor(styledText);
			tabFolder.setSelection(tabItem_1);
			
			Label lblFriendMethods = new Label(composite, SWT.NONE);
			toolkit.adapt(lblFriendMethods, true, true);
			lblFriendMethods.setText("Friend Methods List");
			lblFriendMethods.setVisible(false);

			viewer2 = new TableViewer(composite, SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
			Table table2 = viewer2.getTable();
			GridData gd_table2 = new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1);
			gd_table2.widthHint = 0;
			gd_table2.heightHint = 0;
			table2.setLayoutData(gd_table2);
			//viewer2.setContentProvider(new ViewContentProvider("friends"));
			//viewer2.setLabelProvider(new ViewLabelProvider());        
			//viewer2.setInput(getViewSite());
			obj = getViewSite();
			
			Button btnInsertCode = new Button(section, SWT.NONE);
			btnInsertCode.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					System.out.println("Insert Code clicked");
					int tabIndex = tabFolder.getSelectionIndex();
					CodeInsertion ci = new CodeInsertion();
					ci.performInsert(methodBodyTextAreasList.get(tabIndex).getText());
				}
			});
			toolkit.adapt(btnInsertCode, true, true);
			section.setTextClient(btnInsertCode);
			btnInsertCode.setText("Insert Code");
			//tbtmNewItem.setData(data);


		}catch(Exception ex)
		{
			System.out.println("Exception in SampleView createPart");
		}

	}
	public TableViewer getViewer() {
		return viewer;
	}

	public void setViewer(TableViewer viewer) {
		this.viewer = viewer;
	}

	private void hookContextMenu() {
		MenuManager menuMgr = new MenuManager("#PopupMenu");
		menuMgr.setRemoveAllWhenShown(true);
		menuMgr.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager manager) {
				SampleView.this.fillContextMenu(manager);
			}
		});
		Menu menu = menuMgr.createContextMenu(viewer.getControl());
		viewer.getControl().setMenu(menu);
		getSite().registerContextMenu(menuMgr, viewer);
	}

	private void contributeToActionBars() {
		IActionBars bars = getViewSite().getActionBars();
		fillLocalPullDown(bars.getMenuManager());
		fillLocalToolBar(bars.getToolBarManager());
	}

	private void fillLocalPullDown(IMenuManager manager) {
		manager.add(action1);
		manager.add(new Separator());
		manager.add(action2);
	}

	private void fillContextMenu(IMenuManager manager) {
		manager.add(action1);
		manager.add(action2);
		// Other plug-ins can contribute there actions here
		manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
	}
	
	private void fillLocalToolBar(IToolBarManager manager) {
		manager.add(action1);
		manager.add(action2);
	}

	private void makeActions() {
		action1 = new Action() {
			public void run() {
				showMessage("Action 1 executed");
				CodeInsertion ci = new CodeInsertion();
				ci.performInsert();
			}
		};
		action1.setText("Action 1");
		action1.setToolTipText("Action 1 tooltip");
		action1.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
			getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
		
		action2 = new Action() {
			public void run() {
				showMessage("Action 2 executed");
			}
		};
		action2.setText("Action 2");
		action2.setToolTipText("Action 2 tooltip");
		action2.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
				getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
		
		
		doubleClickAction = new Action() {
			public void run() {

				ISelection selection = viewer.getSelection();
				Object obj = ((IStructuredSelection)selection).getFirstElement();
				//showMessage("Double-click detected on "+obj.toString());
				viewer2.setContentProvider(new ViewContentProvider("friends"));
				viewer2.setLabelProvider(new ViewLabelProvider());        
				viewer2.setInput(getViewSite());

				TabItem tabItem_1 = new TabItem(tabFolder, SWT.NONE);
				tabItem_1.setText("New Item");

				Composite composite_1 = new Composite(tabFolder, SWT.NONE);
				tabItem_1.setControl(composite_1);

				toolkit.paintBordersFor(composite_1);
				composite_1.setLayout(new GridLayout(1, false));

				TextViewer textViewer = new TextViewer(composite_1, SWT.BORDER | SWT.READ_ONLY | SWT.V_SCROLL | SWT.H_SCROLL);
				StyledText styledText = textViewer.getTextWidget();
				styledText.setEditable(false);
				GridData gd_styledText = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
				gd_styledText.heightHint = 50;		 
				styledText.setLayoutData(gd_styledText);
				methodBodyTextAreasList.add(styledText);

				styledText.setText(obj.toString());
				toolkit.paintBordersFor(styledText);
				tabFolder.setSelection(tabItem_1);
			}
		};
	}

	private void hookDoubleClickAction() {
		viewer.addDoubleClickListener(new IDoubleClickListener() {
			public void doubleClick(DoubleClickEvent event) {
				doubleClickAction.run();
			}
		});
	}
	private void showMessage(String message) {
		
		//methodBodyTextArea.setText(message);
	
		MessageDialog.openInformation(
			viewer.getControl().getShell(),
			"Sample View",
			message);
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}
}