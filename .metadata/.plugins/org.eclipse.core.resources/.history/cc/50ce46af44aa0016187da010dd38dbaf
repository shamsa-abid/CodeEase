package sampleview.views;


import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.part.*;

import lums.cbrs.completion.CodeCompletion;
import sampleview.Activator;

import org.eclipse.jface.viewers.*;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;

import java.net.URI;
import java.util.ArrayList;

import org.eclipse.jface.action.*;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.*;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.forms.widgets.ScrolledForm;
import org.eclipse.ui.forms.widgets.Section;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;


/**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */

public class SampleView extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "sampleview.views.SampleView";

	private TableViewer viewer;
	private Action action1;
	private Action action2;
	private Action doubleClickAction;
	private static ArrayList<String> methodNames = new ArrayList<String>();

	/*
	 * The content provider class is responsible for
	 * providing objects to the view. It can wrap
	 * existing objects in adapters or simply return
	 * objects as-is. These objects may be sensitive
	 * to the current input of the view, or ignore
	 * it and always show the same content 
	 * (like Task List, for example).
	 */
	 
	public ArrayList<String> getMethodNames() {
		return methodNames;
	}

	public void setMethodNames(ArrayList<String> methodNames) {
		this.methodNames = methodNames;
	}

	class ViewContentProvider implements IStructuredContentProvider {
		public void inputChanged(Viewer v, Object oldInput, Object newInput) {
		}
		public void dispose() {
		}
		public Object[] getElements(Object parent) {
			//return new String[] { "One", "Two", "Three" };
			
			CodeCompletion cc = new CodeCompletion();
			return cc.getMethodNames().toArray();
			//return methodNames.toArray();
		}
	}
	class ViewLabelProvider extends LabelProvider implements ITableLabelProvider {
		public String getColumnText(Object obj, int index) {
			return getText(obj);
		}
		public Image getColumnImage(Object obj, int index) {
			return getImage(obj);
		}
		public Image getImage(Object obj) {
			//platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif
			//return PlatformUI.getWorkbench().
			//		getSharedImages().getImage(ISharedImages.IMG_OBJ_FOLDER);		
			
			ImageDescriptor descriptor =   Activator.getImageDescriptor("platform:/plugin/org.eclipse.xtext.ui/icons/defaultoutlinenode.gif");
	    return descriptor.createImage();
		}
	}
	class NameSorter extends ViewerSorter {
	}

	/**
	 * The constructor.
	 */
	public SampleView() {
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	/*public void createPartControl(Composite parent) {
		viewer = new TableViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		viewer.setContentProvider(new ViewContentProvider());
		viewer.setLabelProvider(new ViewLabelProvider());
		viewer.setSorter(new NameSorter());
		viewer.setInput(getViewSite());

		// Create the help context id for the viewer's control
		PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "sampleview.viewer");
		makeActions();
		hookContextMenu();
		hookDoubleClickAction();
		contributeToActionBars();
	}
*/
	 public void createPartControl(Composite parent) {
         /*FormToolkit toolkit = new FormToolkit(parent.getDisplay());         
         // Lets make a layout for the first section of the screen
                  
         // Creating the Screen
         Section section = toolkit.createSection(parent, Section.COMPACT | Section.DESCRIPTION | Section.TITLE_BAR);
         section.setText("Method Completion Recommendations");
         section.setDescription("3 results found");
         // Composite for storing the data
         Composite client = toolkit.createComposite(section, SWT.H_SCROLL | SWT.V_SCROLL);
         GridLayout layout = new GridLayout();
         layout = new GridLayout();
         layout.numColumns = 2;
         layout.marginWidth = 2;
         layout.marginHeight = 2;
         client.setLayout(layout);
         
         Table t = toolkit.createTable(client, SWT.NONE);
         GridData gd = new GridData(GridData.FILL_BOTH);
         gd.minimumWidth = 60;
         gd.grabExcessVerticalSpace = false;
         gd.grabExcessHorizontalSpace = false;
         gd.heightHint = 20;
         t.setLayoutData(gd);
         
         toolkit.paintBordersFor(client);
         
         section.setClient(client);
         //new section
         //Section section2 = toolkit.createSection(parent, Section.DESCRIPTION
          //       | Section.TITLE_BAR);
         //section2.setText("Method Bodies"); //$NON-NLS-1$
         //section2.setDescription("3 results found");
         //section2.setClient(client);
         
         viewer = new TableViewer(t);
         
         TabFolder tabFolder = new TabFolder(client, SWT.NONE);
         toolkit.adapt(tabFolder);
         toolkit.paintBordersFor(tabFolder);
         
         TabItem tbtmNewItem = new TabItem(tabFolder, SWT.NONE);
         tbtmNewItem.setText("New Item");
         */
		 try{
			 FormToolkit toolkit = new FormToolkit(parent.getDisplay());      
			 Section section = toolkit.createSection(parent, Section.COMPACT | Section.DESCRIPTION | Section.TITLE_BAR);
	         section.setText("Method Completion Recommendations");
	         section.setDescription("3 results found");
	         
		 Composite composite = new Composite(parent, SWT.NONE);
		 composite.setLayout(new GridLayout(2, false));		 
         
		  viewer = new TableViewer(composite, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		  Table table = viewer.getTable();
		  GridData gd_table = new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1);
		  gd_table.widthHint = 180;
		  table.setLayoutData(gd_table);
		  viewer.setContentProvider(new ViewContentProvider());
		  viewer.setLabelProvider(new ViewLabelProvider());        
		  viewer.setInput(getViewSite());
		  PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "sampleview.viewer");
		  makeActions();
	 		hookContextMenu();
	 		hookDoubleClickAction();
	 		contributeToActionBars();
		 
		 TabFolder tabFolder = new TabFolder(composite, SWT.NONE);
		 GridData gd_tabFolder = new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1);
		 gd_tabFolder.minimumWidth = 100;
		 gd_tabFolder.widthHint = 100;
		 tabFolder.setLayoutData(gd_tabFolder);
		 
		 TabItem tbtmNewItem = new TabItem(tabFolder, SWT.NONE);
		 tbtmNewItem.setText("New Item");
		 
		 
		 }catch(Exception ex)
		 {
			 System.out.println("Exception in SampleView createPart");
		 }
		 
 }
	public TableViewer getViewer() {
		return viewer;
	}

	public void setViewer(TableViewer viewer) {
		this.viewer = viewer;
	}

	private void hookContextMenu() {
		MenuManager menuMgr = new MenuManager("#PopupMenu");
		menuMgr.setRemoveAllWhenShown(true);
		menuMgr.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager manager) {
				SampleView.this.fillContextMenu(manager);
			}
		});
		Menu menu = menuMgr.createContextMenu(viewer.getControl());
		viewer.getControl().setMenu(menu);
		getSite().registerContextMenu(menuMgr, viewer);
	}

	private void contributeToActionBars() {
		IActionBars bars = getViewSite().getActionBars();
		fillLocalPullDown(bars.getMenuManager());
		fillLocalToolBar(bars.getToolBarManager());
	}

	private void fillLocalPullDown(IMenuManager manager) {
		manager.add(action1);
		manager.add(new Separator());
		manager.add(action2);
	}

	private void fillContextMenu(IMenuManager manager) {
		manager.add(action1);
		manager.add(action2);
		// Other plug-ins can contribute there actions here
		manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
	}
	
	private void fillLocalToolBar(IToolBarManager manager) {
		manager.add(action1);
		manager.add(action2);
	}

	private void makeActions() {
		action1 = new Action() {
			public void run() {
				showMessage("Action 1 executed");
			}
		};
		action1.setText("Action 1");
		action1.setToolTipText("Action 1 tooltip");
		action1.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
			getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
		
		action2 = new Action() {
			public void run() {
				showMessage("Action 2 executed");
			}
		};
		action2.setText("Action 2");
		action2.setToolTipText("Action 2 tooltip");
		action2.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
				getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
		doubleClickAction = new Action() {
			public void run() {
				ISelection selection = viewer.getSelection();
				Object obj = ((IStructuredSelection)selection).getFirstElement();
				showMessage("Double-click detected on "+obj.toString());
			}
		};
	}

	private void hookDoubleClickAction() {
		viewer.addDoubleClickListener(new IDoubleClickListener() {
			public void doubleClick(DoubleClickEvent event) {
				doubleClickAction.run();
			}
		});
	}
	private void showMessage(String message) {
		MessageDialog.openInformation(
			viewer.getControl().getShell(),
			"Sample View",
			message);
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}
}